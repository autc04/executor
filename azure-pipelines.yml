trigger:
- master
jobs:
- job: Windows
  condition: false
  pool:
    vmImage: 'vs2017-win2016'

  steps:
  - checkout: self
    submodules: true
  - script: |
      pip install aqtinstall
      C:
      cd \
      python -m aqt 5.11.3 windows desktop win64_msvc2017_64
    displayName: 'install qt'
  - script: |
      set
      dir C:\Qt5.11.3\5.11.3
      dir "C:/Program Files/Boost/1.69.0"
      dir "C:/Program Files/Boost/1.69.0/lib"
      dir "C:/Program Files/Boost/1.69.0/libs"
      dir "C:/Program Files/Boost/1.69.0/include/boost-1_69"
    displayName: 'show dirs'
  - script: |
      choco install llvm ninja winflexbison3 --yes
      set PATH=C:\Program Files\LLVM\bin;%PATH%
      clang-cl --version    
    displayName: 'install llvm, ninja, bison'
  #- script: |
  #    vcpkg install sdl2
  #  displayName: 'vcpkg install'
  - script: |
      set PATH=C:\Program Files\LLVM\bin;%PATH%
      call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" x64
      mkdir build
      cd build
      cmake -G Ninja ^
        -DCMAKE_BUILD_TYPE=Release ^
        -DCMAKE_C_COMPILER=clang-cl ^
        -DCMAKE_CXX_COMPILER=clang-cl ^
        -DFRONT_END=qt ^
        -DBISON_COMMAND=win_bison ^
        -DCMAKE_PREFIX_PATH=C:\Qt5.11.3\5.11.3\msvc2017_64\lib\cmake ^
        -DBoost_COMPILER=-vc141 ^
        ..
      cmake --build .

  #       -DCMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake 

- job: macOS
  pool:
    vmImage: 'macOS-10.14'
  steps:
  - checkout: self
    submodules: true
  - script: |
      brew install boost qt ninja
    displayName: 'Brew prerequisites'
  - script: |
      mkdir build
      cd build
      cmake .. -G Ninja -DCMAKE_PREFIX_PATH=/usr/local/opt/qt/lib/cmake
      cmake --build .
    displayName: Build
  - script: |
      cd build
      ctest . -LE xfail --no-compress-output -T test || true
    displayName: 'Run tests'
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'CTest'
      testResultsFiles: build/Testing/**/*.xml
      buildPlatform: 'x86_64-macos'
  - script: |
      cd build
      cpack
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: build/Executor2000-0.1.0-Darwin.tar.bz2
      artifactName: Executor2000-Darwin.tar.bz2

- job: Linux
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - checkout: self
    submodules: true
  - script: |
      docker build -f docker/Dockerfile.x86_64 . -t executor-buildtools64
    displayName: 'Install prerequisites'
  - script: |
      docker run --rm -v `pwd`:/files executor-buildtools64 sh -c 'mkdir -p build && cd build && cmake .. -G Ninja && cmake --build .'
    displayName: 'Build'
  - script: |
      docker run --rm -v `pwd`:/files executor-buildtools64 sh -c 'cd build && ctest . -LE xfail --no-compress-output -T test || true'
    displayName: 'Run tests'
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'CTest'
      testResultsFiles: build/Testing/**/*.xml
      buildPlatform: 'x86_64-linux'
  - script: |
      docker run --rm -v `pwd`:/files executor-buildtools64 sh -c 'cd build && cpack'
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: build/Executor2000-0.1.0-Linux.tar.bz2
      artifactName: Executor2000-Linux.tar.bz2

- job: Linux32
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - checkout: self
    submodules: true
  - script: |
      docker build -f docker/Dockerfile.i386 . -t executor-buildtools32
    displayName: 'Install prerequisites'
  - script: |
      docker run --rm -v `pwd`:/files executor-buildtools32 sh -c 'mkdir -p build && cd build && cmake .. -G Ninja && cmake --build .'
    displayName: 'Build'
  - script: |
      docker run --rm -v `pwd`:/files executor-buildtools32 sh -c 'cd build && ctest . -LE xfail --no-compress-output -T test || true'
    displayName: 'Run tests'
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'CTest'
      testResultsFiles: build/Testing/**/*.xml
      buildPlatform: 'i386-linux'
  - script: |
      docker run --rm -v `pwd`:/files executor-buildtools32 sh -c 'cd build && cpack'
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: build/Executor2000-0.1.0-Linux.tar.bz2
      artifactName: Executor2000-Linux32.tar.bz2
