trigger:
- master
jobs:
- job: Experiment
  condition: false
  pool:
    vmImage: 'windows-2019'
  steps:
  - script: |
      cd "C:\Program Files (x86)\Microsoft Visual Studio\2019\"
      C:
      tree /A

- job: Windows
  condition: true
  pool:
    vmImage: 'windows-2019'

  steps:
  - script: |
      choco install msys2 --yes
      C:\tools\msys64\usr\bin\bash --login -c "pacman -S --noconfirm bison"
    displayName: 'install msys2 / bison'
  - script: |
      pip install aqtinstall
      C:
      cd \
      python -m aqt install -O C:\Qt 5.15.0 windows desktop win64_msvc2019_64
    displayName: 'install qt'
  - checkout: self
    submodules: true
  - script: |
      mkdir build
      cd build

      set STUDIO=C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise
      set CMAKE=%STUDIO%\COMMON7\IDE\COMMONEXTENSIONS\MICROSOFT\CMAKE\CMake\bin\cmake.exe
      
      call "%STUDIO%\VC\Auxiliary\Build\vcvarsall.bat" x64
      "%CMAKE%" ^
        .. ^
        -G Ninja ^
        -DCMAKE_BUILD_TYPE="Release" ^
        -DBOOST_ROOT=%BOOST_ROOT_1_72_0% ^
        -DBISON_COMMAND=c:\tools\msys64\usr\bin\bison.exe ^
        -DCMAKE_PREFIX_PATH=C:\Qt\5.15.0\msvc2019_64\lib\cmake ^
        -DCMAKE_MAKE_PROGRAM="%STUDIO%\COMMON7\IDE\COMMONEXTENSIONS\MICROSOFT\CMAKE\Ninja\ninja.exe" ^
        -DCMAKE_C_COMPILER:FILEPATH="%STUDIO%/VC/Tools/Llvm/bin/clang-cl.exe"  ^
        -DCMAKE_CXX_COMPILER:FILEPATH="%STUDIO%/VC/Tools/Llvm/bin/clang-cl.exe"
      "%CMAKE%" --build . --config Release


- job: macOS
  condition: false
  pool:
    vmImage: 'macOS-10.14'
  steps:
  - checkout: self
    submodules: true
  - script: |
      brew install boost qt ninja ruby
    displayName: 'Brew prerequisites'
  - script: |
      mkdir build
      cd build
      cmake .. -G Ninja -DCMAKE_PREFIX_PATH=/usr/local/opt/qt/lib/cmake
      cmake --build .
    displayName: Build
  - script: |
      cd build
      ctest . -LE xfail --no-compress-output -T test || true
    displayName: 'Run tests'
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'CTest'
      testResultsFiles: build/Testing/**/*.xml
      buildPlatform: 'x86_64-macos'
  - script: |
      cd build
      cpack
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: build/Executor2000-0.1.0-Darwin.tar.bz2
      artifactName: Executor2000-Darwin.tar.bz2

- job: Linux
  condition: false
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - checkout: self
    submodules: true
  - script: |
      docker build -f docker/Dockerfile.x86_64 . -t executor-buildtools64
    displayName: 'Install prerequisites'
  - script: |
      docker run --rm -v `pwd`:/files executor-buildtools64 sh -c 'mkdir -p build && cd build && cmake .. -G Ninja && cmake --build .'
    displayName: 'Build'
  - script: |
      docker run --rm -v `pwd`:/files executor-buildtools64 sh -c 'cd build && ctest . -LE xfail --no-compress-output -T test || true'
    displayName: 'Run tests'
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'CTest'
      testResultsFiles: build/Testing/**/*.xml
      buildPlatform: 'x86_64-linux'
  - script: |
      docker run --rm -v `pwd`:/files executor-buildtools64 sh -c 'cd build && cpack'
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: build/Executor2000-0.1.0-Linux.tar.bz2
      artifactName: Executor2000-Linux.tar.bz2

- job: Linux32
  condition: false
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - checkout: self
    submodules: true
  - script: |
      docker build -f docker/Dockerfile.i386 . -t executor-buildtools32
    displayName: 'Install prerequisites'
  - script: |
      docker run --rm -v `pwd`:/files executor-buildtools32 sh -c 'mkdir -p build && cd build && cmake .. -G Ninja && cmake --build .'
    displayName: 'Build'
  - script: |
      docker run --rm -v `pwd`:/files executor-buildtools32 sh -c 'cd build && ctest . -LE xfail --no-compress-output -T test || true'
    displayName: 'Run tests'
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'CTest'
      testResultsFiles: build/Testing/**/*.xml
      buildPlatform: 'i386-linux'
  - script: |
      docker run --rm -v `pwd`:/files executor-buildtools32 sh -c 'cd build && cpack'
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: build/Executor2000-0.1.0-Linux.tar.bz2
      artifactName: Executor2000-Linux32.tar.bz2
