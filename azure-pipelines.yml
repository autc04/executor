trigger:
- master
jobs:

- job: Windows
  condition: true
  pool:
    vmImage: 'windows-2019'

  steps:
  - script: |
      choco install msys2 llvm --yes
    displayName: 'choco install msys2, llvm'
  - script: |
      C:\tools\msys64\usr\bin\bash --login -c "pacman -S --noconfirm bison"
    displayName: 'msys/pacman install bison'
  - script: |
      pip install aqtinstall
      C:
      cd \
      python -m aqt install -O C:\Qt 5.15.0 windows desktop win64_msvc2019_64
    displayName: 'install qt'
  - checkout: self
    submodules: true
  - script: |
      mkdir build
      cd build

      set STUDIO=C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise
      call "%STUDIO%\VC\Auxiliary\Build\vcvars64.bat"
      set PATH=C:\Program Files\LLVM\bin;C:\hostedtoolcache\windows\Boost\1.72.0\lib;%PATH%

      cmake ^
          ..  ^
          -G Ninja ^
          -DCMAKE_BUILD_TYPE="Release" ^
          -DCMAKE_C_COMPILER:FILEPATH=clang-cl.exe  ^
          -DCMAKE_CXX_COMPILER:FILEPATH=clang-cl.exe ^
          -DCMAKE_LINKER:FILEPATH=lld-link.exe ^
          -DCMAKE_PREFIX_PATH=C:\Qt\5.15.0\msvc2019_64\lib\cmake ^
          -DBOOST_ROOT=%BOOST_ROOT_1_72_0% ^
          -DBISON_COMMAND=c:\tools\msys64\usr\bin\bison.exe

      type CMakeCache.txt

      cmake --build .

      rem -DBoost_COMPILER=-vc142
    displayName: 'Build'

  - script: |
      cd build

      set STUDIO=C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise
      call "%STUDIO%\VC\Auxiliary\Build\vcvars64.bat"
      set PATH=C:\Program Files\LLVM\bin;C:\hostedtoolcache\windows\Boost\1.72.0\lib;%PATH%

      ctest . -LE xfail --no-compress-output -T test

    displayName: 'Run tests'

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'CTest'
      testResultsFiles: build/Testing/**/*.xml
      buildPlatform: 'x86_64-win64'
  - script: |
      cd build

      set STUDIO=C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise
      call "%STUDIO%\VC\Auxiliary\Build\vcvars64.bat"
      set PATH=C:\Program Files\LLVM\bin;C:\hostedtoolcache\windows\Boost\1.72.0\lib;%PATH%

      cpack
    displayName: 'CPack'

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: build/Executor2000-0.1.0-win64.zip
      artifactName: Executor2000-win64.zip

- job: WindowsMingw
  condition: true
  pool:
    vmImage: 'windows-2019'

  steps:
  - script: |
      choco install msys2 --yes
    displayName: 'install msys2'
  - script: |
      set MSYSTEM=MINGW64
      C:\tools\msys64\usr\bin\bash --login -c "pacman -S --noconfirm bison perl ruby"
      C:\tools\msys64\usr\bin\bash --login -c "pacman -S --noconfirm mingw-w64-x86_64-gcc mingw-w64-x86_64-make mingw-w64-x86_64-cmake"
      C:\tools\msys64\usr\bin\bash --login -c "pacman -S --noconfirm mingw-w64-x86_64-qt5 mingw-w64-x86_64-boost"
    displayName: 'install msys packages'

  - checkout: self
    submodules: true

  - script: |
      rem case insensitivity conflict
      del lmdbxx\version
    displayName: 'case insensitivity hack'

  - script: |
      mkdir build
      cd build

      set MSYSTEM=MINGW64
      set CHERE_INVOKING=1
      C:\tools\msys64\usr\bin\bash --login -c "cmake .. -G 'MinGW Makefiles'  -DCMAKE_BUILD_TYPE=Release && cmake --build ."
    displayName: 'Build'

  - script: |
      cd build

      set MSYSTEM=MINGW64
      set CHERE_INVOKING=1
      C:\tools\msys64\usr\bin\bash --login -c "ctest . -LE xfail --no-compress-output -T test || true"
    displayName: 'Run tests'

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'CTest'
      testResultsFiles: build/Testing/**/*.xml
      buildPlatform: 'x86_64-mingw'
  - script: |
      cd build
      set MSYSTEM=MINGW64
      set CHERE_INVOKING=1
      C:\tools\msys64\usr\bin\bash --login -c "cpack"
    displayName: 'CPack'

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: build/Executor2000-0.1.0-win64-mingw.zip
      artifactName: Executor2000-win64-mingw.zip

- job: macOS
  condition: true
  pool:
    vmImage: 'macOS-10.14'
  steps:
  - checkout: self
    submodules: true
  - script: |
      brew install boost qt ninja ruby
    displayName: 'Brew prerequisites'
  - script: |
      mkdir build
      cd build
      cmake .. -G Ninja -DCMAKE_PREFIX_PATH=/usr/local/opt/qt/lib/cmake
      cmake --build .
    displayName: Build
  - script: |
      cd build
      ctest . -LE xfail --no-compress-output -T test || true
    displayName: 'Run tests'
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'CTest'
      testResultsFiles: build/Testing/**/*.xml
      buildPlatform: 'x86_64-macos'
  - script: |
      cd build
      # hack: for some reason homebrew write-locks this framework.
      # it is then copied by the fixup_bundle command, preserving the write-lock
      # ... and that causes it to fail.
      chmod +w /usr/local/Cellar/qt/*/Frameworks/QtPrintSupport.framework/Versions/5/QtPrintSupport
      cpack
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: build/Executor2000-0.1.0-macOS.dmg
      artifactName: Executor2000-macOS.dmg

- job: Linux
  condition: true
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - checkout: self
    submodules: true
  - script: |
      docker build -f docker/Dockerfile.x86_64 . -t executor-buildtools64
    displayName: 'Install prerequisites'
  - script: |
      docker run --rm -v `pwd`:/files executor-buildtools64 sh -c 'mkdir -p build && cd build && cmake .. -G Ninja && cmake --build .'
    displayName: 'Build'
  - script: |
      docker run --rm -v `pwd`:/files executor-buildtools64 sh -c 'cd build && ctest . -LE xfail --no-compress-output -T test || true'
    displayName: 'Run tests'
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'CTest'
      testResultsFiles: build/Testing/**/*.xml
      buildPlatform: 'x86_64-linux'
  - script: |
      docker run --rm -v `pwd`:/files executor-buildtools64 sh -c 'cd build && cpack'
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: build/Executor2000-0.1.0-Linux.tar.bz2
      artifactName: Executor2000-Linux.tar.bz2

- job: Linux32
  condition: true
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - checkout: self
    submodules: true
  - script: |
      docker build -f docker/Dockerfile.i386 . -t executor-buildtools32
    displayName: 'Install prerequisites'
  - script: |
      docker run --rm -v `pwd`:/files executor-buildtools32 sh -c 'mkdir -p build && cd build && cmake .. -G Ninja && cmake --build .'
    displayName: 'Build'
  - script: |
      docker run --rm -v `pwd`:/files executor-buildtools32 sh -c 'cd build && ctest . -LE xfail --no-compress-output -T test || true'
    displayName: 'Run tests'
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'CTest'
      testResultsFiles: build/Testing/**/*.xml
      buildPlatform: 'i386-linux'
  - script: |
      docker run --rm -v `pwd`:/files executor-buildtools32 sh -c 'cd build && cpack'
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: build/Executor2000-0.1.0-Linux.tar.bz2
      artifactName: Executor2000-Linux32.tar.bz2
